import logging
from textwrap import dedent

import redis
from environs import Env
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ParseMode
from telegram.ext import (CallbackQueryHandler, CommandHandler, Filters,
                          MessageHandler, Updater)

from moltin_api import Moltin

_database = None

logger = logging.getLogger('fish-shop')


def start(bot, update):
    """
    –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è START.

    –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ñ—Ä–∞–∑–æ–π "–ü—Ä–∏–≤–µ—Ç!" –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –µ–≥–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ECHO.
    –¢–µ–ø–µ—Ä—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –µ–≥–æ –∫–æ–º–∞–Ω–¥—ã –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—å—Å—è —Ö—ç–Ω–¥–ª–µ—Ä echo.
    """

    moltin = Moltin()

    moltin.get_or_create_cart(update.effective_user.id)

    products = moltin.get_products()

    keyboard = []

    for product in products:
        keyboard.append(
            [
                InlineKeyboardButton(
                    product.get('name'),
                    callback_data=product.get('id')
                )
            ]
        )

    keyboard.append(
        [InlineKeyboardButton(
            'üõí –ö–æ—Ä–∑–∏–Ω–∞',
            callback_data='SHOW_CART'
        )]
    )

    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        update.message.reply_text('Please choose:', reply_markup=reply_markup)
    else:
        chat_id = update.effective_chat.id
        bot.deleteMessage(chat_id=chat_id,
                          message_id=update.effective_message.message_id)

        bot.send_message(chat_id=chat_id,
                         text='Please choose:',
                         reply_markup=reply_markup)

    return 'HANDLE_MENU'


def get_image_url(product):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    moltin = Moltin()

    try:
        if file_id := (product.get('relationships')
                       .get('main_image')
                       .get('data')
                       .get('id')):

            if file_url := (moltin.get_file_url(file_id)
                            .get('data')
                            .get('link')
                            .get('href')):

                return file_url
    except Exception:
        return open('no_image.jpg', 'rb')


def handle_menu(bot, update):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é."""
    query = update.callback_query
    item_id = query.data

    moltin = Moltin()

    product = moltin.get_product(item_id)

    image_url = get_image_url(product)

    price = product.get('price')[0]
    price = f'{float(price["amount"]) / 100} {price["currency"]}'

    message_text = dedent(
        f'''
            *{product.get('name')}*

            *–¶–µ–Ω–∞:*:
            `{price}`

            –û–ø–∏—Å–∞–Ω–∏–µ:
            `{product.get('description')}`

        '''
    )

    bot.deleteMessage(chat_id=update.effective_chat.id,
                      message_id=update.effective_message.message_id)

    quantity_button = []

    for quantity in [1, 5, 10]:
        quantity_button.append(
            InlineKeyboardButton(
                f'{quantity} –∫–≥.',
                callback_data=f'{item_id}#{quantity}',
            )
        )

    keyboard = [
        quantity_button,
        [InlineKeyboardButton('üõí –ö–æ—Ä–∑–∏–Ω–∞', callback_data='SHOW_CART')],
        [InlineKeyboardButton('–í –º–µ–Ω—é', callback_data='BACK')]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    bot.send_photo(
        chat_id=update.effective_chat.id,
        photo=image_url,
        caption=message_text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=reply_markup)

    return 'HANDLE_DESCRIPTION'


def handle_description(bot, update):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è."""
    user_id = update.effective_user.id
    query = update.callback_query

    item_id, quantity = query.data.split('#')

    moltin = Moltin()
    moltin.add_cart_item(user_id, item_id=item_id, quantity=quantity)

    return 'HANDLE_DESCRIPTION'


def show_cart(bot, update):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã."""
    chat_id = update.effective_chat.id
    message_id = update.effective_message.message_id
    user_id = update.effective_user.id

    moltin = Moltin()
    cart = moltin.get_cart(user_id)
    cart_items = moltin.get_cart_items(user_id).get('data', [])

    cost = (cart.get('data')
                .get('meta')
                .get('display_price')
                .get('with_tax')
                .get('formatted'))

    keyboard = []
    description_items = []

    for item in cart_items:
        quantity = item.get('quantity', 0)
        price = item.get('unit_price', 0).get('amount', 0) / 100

        description_items.append(
            dedent(
                f'''
                    *{item.get('name')}*
                    *–¶–µ–Ω–∞:*
                    `{price}`
                    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:
                    `{quantity}`
                '''
            )
        )

        keyboard.append(
            [
                InlineKeyboardButton(
                    f'–£–±—Ä–∞—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã: {item.get("name")}',
                    callback_data=f'{item.get("id")}',
                )
            ]
        )

    description_items.append(
        dedent(
            f'''
                –°—Ç–æ–∏–º–æ—Å—Ç—å:
                `{cost}`
            '''
        )
    )

    message_text = dedent(
        f'''
            üõí *–¢–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ:*
            {''.join(description_items)}
        '''
    )

    keyboard.append(
        [InlineKeyboardButton('–û–ø–ª–∞—Ç–∏—Ç—å', callback_data='WAITING_EMAIL')]
    )

    keyboard.append(
        [InlineKeyboardButton('–í –º–µ–Ω—é', callback_data='BACK')]
    )

    reply_markup = InlineKeyboardMarkup(keyboard)

    bot.deleteMessage(chat_id=chat_id,
                      message_id=message_id)

    bot.send_message(chat_id=chat_id,
                     text=message_text,
                     reply_markup=reply_markup,
                     parse_mode=ParseMode.MARKDOWN)

    return 'HANDLE_CART'


def handle_cart(bot, update):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∫–æ—Ä–∑–∏–Ω—ã."""
    user_id = update.effective_user.id

    query = update.callback_query
    item_id = query.data

    moltin = Moltin()
    moltin.remove_cart_item(user_id, item_id)

    return show_cart(bot, update)


def waiting_email(bot, update):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ email –ø–æ–∫—É–ø–∞—Ç–µ–ª—è."""
    chat_id = update.effective_chat.id
    message_id = update.effective_message.message_id
    user_id = update.effective_user.id

    if update.message:
        email = update.message.text

        update.message.reply_text(f'–í–∞—à e-mail: {email}')

        moltin = Moltin()
        moltin.create_customer(user_id, email)

        return show_cart(bot, update)
    else:
        bot.deleteMessage(chat_id=chat_id,
                          message_id=message_id)

        bot.send_message(chat_id=chat_id,
                         text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π e-mail:')

        return 'WAITING_EMAIL'


def handle_users_reply(bot, update):
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –ª—é–±–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–µ—à–∞–µ—Ç –∫–∞–∫ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å.

    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
        * –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ inline-–∫–Ω–æ–ø–∫—É –≤ –±–æ—Ç–µ
        * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É
        * –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç—É
    –û–Ω–∞ –ø–æ–ª—É—á–∞–µ—Ç —Å—Ç–µ–π—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (—Ö—ç–Ω–¥–ª–µ—Ä).
    –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, Telegram —Ñ–æ—Ä—Å–∏—Ç –µ–≥–æ –Ω–∞–ø–∏—Å–∞—Ç—å "/start",
    –ø–æ—ç—Ç–æ–º—É –ø–æ —ç—Ç–æ–π —Ñ—Ä–∞–∑–µ –≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ö–æ—á–µ—Ç –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º –∑–∞–Ω–æ–≤–æ, –æ–Ω —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π.
    """
    db = get_database_connection()
    if update.message:
        user_reply = update.message.text
        chat_id = update.message.chat_id
    elif update.callback_query:
        user_reply = update.callback_query.data
        chat_id = update.callback_query.message.chat_id
    else:
        return
    if user_reply == '/start' or user_reply == 'BACK':
        user_state = 'START'
    elif user_reply == 'SHOW_CART':
        user_state = 'SHOW_CART'
    elif user_reply == 'WAITING_EMAIL':
        user_state = 'WAITING_EMAIL'
    else:
        user_state = db.get(chat_id).decode('utf-8')

    states_functions = {
        'START': start,
        'HANDLE_MENU': handle_menu,
        'HANDLE_DESCRIPTION': handle_description,
        'SHOW_CART': show_cart,
        'HANDLE_CART': handle_cart,
        'WAITING_EMAIL': waiting_email
    }
    state_handler = states_functions[user_state]
    # –ï—Å–ª–∏ –≤—ã –≤–¥—Ä—É–≥ –Ω–µ –∑–∞–º–µ—Ç–∏—Ç–µ, —á—Ç–æ python-telegram-bot –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏.
    # –û—Å—Ç–∞–≤–ª—è—é —ç—Ç–æ—Ç try...except, —á—Ç–æ–±—ã –∫–æ–¥ –Ω–µ –ø–∞–¥–∞–ª –º–æ–ª—á–∞.
    # –≠—Ç–æ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç –º–æ–∂–Ω–æ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å.
    try:
        next_state = state_handler(bot, update)
        db.set(chat_id, next_state)
    except Exception as err:
        logger.error(err)


def get_database_connection():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω–µ–∫—à–Ω —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö Redis, –ª–∏–±–æ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω.
    """
    global _database
    if _database is None:
        env = Env()
        env.read_env()

        database_host = env.str('REDIS_HOST', 'localhost')
        database_port = env.str('REDIS_PORT', 6379)
        database_username = env.str('REDIS_USERNAME', '')
        database_password = env.str('REDIS_PASSWORD', '')

        _database = redis.Redis(
            host=database_host,
            port=database_port,
            username=database_username,
            password=database_password
        )

    return _database


def main():
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.INFO,
    )

    env = Env()
    env.read_env()

    token = env.str('TELEGRAM_TOKEN')
    moltin_client_id = env.str('MOLTIN_CLIENT_ID')

    Moltin(moltin_client_id)

    updater = Updater(token)
    dispatcher = updater.dispatcher
    dispatcher.add_handler(CallbackQueryHandler(handle_users_reply))
    dispatcher.add_handler(MessageHandler(Filters.text, handle_users_reply))
    dispatcher.add_handler(CommandHandler('start', handle_users_reply))
    updater.start_polling()


if __name__ == '__main__':
    main()
